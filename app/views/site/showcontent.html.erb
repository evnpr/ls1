
  <style type="text/css" media="screen">
    #editor { 
        position: relative;
        margin: 0 100;
        width: 100%;
        height: 500px;
    }
  </style>



<br>
<div id="name" class="row-fluid">
<span class="span1"><a href=<%= "'/list/?r=#{@back}'"%> style="cursor:pointer">
<i class="icon-arrow-up"></i>
</a></span>
<% if !request.GET['e'].nil? then %>
<span class="span1 offset10" style="float:right"><a href=<%="'/content?r=#{@r}&e=1'" %>><button class="btn">edit</button></a></span>
<% else %>
<!--
<span class="span1 offset10" style="float:right"><a href=<%="'/content?r=#{@r}'" %>><button class="btn">show</button></a></span>
-->
<% end %>
</div>

<code class="" style="float:left"><%= @path %></code>
<br>
<br>
<% if !request.GET['e'].nil? then %>
<pre style=" font-family:lucida grande, tahoma, verdana, arial, sans-serif; font-size:14px;">
<%= @contents %>
</pre>

<% else %>





<br>

<pre id="editor">
<%= @contents %>
</pre>

<span id="thisfile" style="display: none" value="<%= @r %>"><%= @r %></span>



<% end %>

<div class="row-fluid" style="margin-top: 30px;">

<div class="span2">
    <button class="btn btn-large btn-inverse" onClick="save()">Save</button>
</div>

<div class="offset4 span2">
    <form action="/site/githubpull" method="post">
    <input type="hidden" name="l" value="<%= @apps_name %>" />
    <input type="hidden" name="r" value="<%= "#{request.protocol}#{request.host_with_port}#{request.fullpath}" %>" />
    <p><input type="submit" value="pull from github" class="btn btn-large btn-info"></p>
    </form>
</div>

<div class="span1">
    <form action="/site/github" method="post" accept-charset="utf-8">
    <input type="hidden" name="r" value="<%= @r %>" />
    <p><input type="submit" value="push github" class="btn btn-danger btn-large"></p>
    </form>
</div>

    <div id="name" class="offset6 span2" style="float: right">
       <a href="http://apps.letspan.com/<%= @apps_name %>"><button class="btn btn-primary btn-large">Go View App</button></a> 
    </div>



</div>




<div id="name" class="row-fluid" style="display: none">


<div id="name" style="float:left">
<form action="/site/bitbucketpull" method="post">
<input type="hidden" name="l" value="<%= @apps_name %>" />
<input type="hidden" name="r" value="<%= "#{request.protocol}#{request.host_with_port}#{request.fullpath}" %>" />
<p><input type="submit" value="pull from bitbucket" class="btn btn-large btn-info"></p>
</form>
    <div id="name" class="" style="float:left">
<form action="/site/bitbucket" method="post" accept-charset="utf-8">
<input type="hidden" name="r" value="<%= @r %>" />
<p><input type="submit" value="push bitbucket" class="btn btn-danger btn-large"></p>
</form>
        
    </div>
</div>

</div>

<script src="src-noconflict/ace.js" type="text/javascript" charset="utf-8"></script>
<script>
    var editor = ace.edit("editor");
    editor.setTheme("ace/theme/twilight");
    editor.getSession().setMode("ace/mode/<%= @language %>");

    function save(){
        var commit = prompt("Commit: ", "just edit <%= @path %>");
        var content = editor.getSession().getValue();
        thisfile = document.getElementById("thisfile").innerHTML
        $.post('/site/savecontent', { content: content, thisfile: thisfile, commit: commit });
    }

    exports.commands = [{
        name: "selectall",
        bindKey: bindKey("Ctrl-A", "Command-A"),
        exec: function(editor) { editor.selectAll(); },
        readOnly: true
    }, {
        name: "centerselection",
        bindKey: bindKey(null, "Ctrl-L"),
        exec: function(editor) { editor.centerSelection(); },
        readOnly: true
    }, {
        name: "gotoline",
        bindKey: bindKey("Ctrl-L", "Command-L"),
        exec: function(editor) {
            var line = parseInt(prompt("Enter line number:"), 10);
            if (!isNaN(line)) {
                editor.gotoLine(line);
            }
        },
        readOnly: true
    }, {
        name: "fold",
        bindKey: bindKey("Alt-L|Ctrl-F1", "Command-Alt-L|Command-F1"),
        exec: function(editor) { editor.session.toggleFold(false); },
        readOnly: true
    }, {
        name: "unfold",
        bindKey: bindKey("Alt-Shift-L|Ctrl-Shift-F1", "Command-Alt-Shift-L|Command-Shift-F1"),
        exec: function(editor) { editor.session.toggleFold(true); },
        readOnly: true
    }, {
        name: "foldall",
        bindKey: bindKey("Alt-0", "Command-Option-0"),
        exec: function(editor) { editor.session.foldAll(); },
        readOnly: true
    }, {
        name: "unfoldall",
        bindKey: bindKey("Alt-Shift-0", "Command-Option-Shift-0"),
        exec: function(editor) { editor.session.unfold(); },
        readOnly: true
    }, {
        name: "findnext",
        bindKey: bindKey("Ctrl-K", "Command-G"),
        exec: function(editor) { editor.findNext(); },
        readOnly: true
    }, {
        name: "findprevious",
        bindKey: bindKey("Ctrl-Shift-K", "Command-Shift-G"),
        exec: function(editor) { editor.findPrevious(); },
        readOnly: true
    }, {
        name: "find",
        bindKey: bindKey("Ctrl-F", "Command-F"),
        exec: function(editor) {
            var needle = prompt("Find:", editor.getCopyText());
            editor.find(needle);
        },
        readOnly: true
    }, {
        name: "save",
        bindKey: bindKey("Ctrl-S", "Command-S"),
        exec: function(editor) { 
            save();
        },
        readOnly: true
    }, {
        name: "overwrite",
        bindKey: "Insert",
        exec: function(editor) { editor.toggleOverwrite(); },
        readOnly: true
    }, {
        name: "selecttostart",
        bindKey: bindKey("Ctrl-Shift-Home", "Command-Shift-Up"),
        exec: function(editor) { editor.getSelection().selectFileStart(); },
        multiSelectAction: "forEach",
        readOnly: true
    }, {
        name: "gotostart",
        bindKey: bindKey("Ctrl-Home", "Command-Home|Command-Up"),
        exec: function(editor) { editor.navigateFileStart(); },
        multiSelectAction: "forEach",
        readOnly: true
    }, {
        name: "selectup",
        bindKey: bindKey("Shift-Up", "Shift-Up"),
        exec: function(editor) { editor.getSelection().selectUp(); },
        multiSelectAction: "forEach",
        readOnly: true
    }, {
        name: "golineup",
        bindKey: bindKey("Up", "Up|Ctrl-P"),
        exec: function(editor, args) { editor.navigateUp(args.times); },
        multiSelectAction: "forEach",
        readOnly: true
    }, {
        name: "selecttoend",
        bindKey: bindKey("Ctrl-Shift-End", "Command-Shift-Down"),
        exec: function(editor) { editor.getSelection().selectFileEnd(); },
        multiSelectAction: "forEach",
        readOnly: true
    }, {
        name: "gotoend",
        bindKey: bindKey("Ctrl-End", "Command-End|Command-Down"),
        exec: function(editor) { editor.navigateFileEnd(); },
        multiSelectAction: "forEach",
        readOnly: true
    }, {
        name: "selectdown",
        bindKey: bindKey("Shift-Down", "Shift-Down"),
        exec: function(editor) { editor.getSelection().selectDown(); },
        multiSelectAction: "forEach",
        readOnly: true
    }, {
        name: "golinedown",
        bindKey: bindKey("Down", "Down|Ctrl-N"),
        exec: function(editor, args) { editor.navigateDown(args.times); },
        multiSelectAction: "forEach",
        readOnly: true
    }, {
        name: "selectwordleft",
        bindKey: bindKey("Ctrl-Shift-Left", "Option-Shift-Left"),
        exec: function(editor) { editor.getSelection().selectWordLeft(); },
        multiSelectAction: "forEach",
        readOnly: true
    }, {
        name: "gotowordleft",
        bindKey: bindKey("Ctrl-Left", "Option-Left"),
        exec: function(editor) { editor.navigateWordLeft(); },
        multiSelectAction: "forEach",
        readOnly: true
    }, {
        name: "selecttolinestart",
        bindKey: bindKey("Alt-Shift-Left", "Command-Shift-Left"),
        exec: function(editor) { editor.getSelection().selectLineStart(); },
        multiSelectAction: "forEach",
        readOnly: true
    }, {
        name: "gotolinestart",
        bindKey: bindKey("Alt-Left|Home", "Command-Left|Home|Ctrl-A"),
        exec: function(editor) { editor.navigateLineStart(); },
        multiSelectAction: "forEach",
        readOnly: true
    }, {
        name: "selectleft",
        bindKey: bindKey("Shift-Left", "Shift-Left"),
        exec: function(editor) { editor.getSelection().selectLeft(); },
        multiSelectAction: "forEach",
        readOnly: true
    }, {
        name: "gotoleft",
        bindKey: bindKey("Left", "Left|Ctrl-B"),
        exec: function(editor, args) { editor.navigateLeft(args.times); },
        multiSelectAction: "forEach",
        readOnly: true
    }, {
        name: "selectwordright",
        bindKey: bindKey("Ctrl-Shift-Right", "Option-Shift-Right"),
        exec: function(editor) { editor.getSelection().selectWordRight(); },
        multiSelectAction: "forEach",
        readOnly: true
    }, {
        name: "gotowordright",
        bindKey: bindKey("Ctrl-Right", "Option-Right"),
        exec: function(editor) { editor.navigateWordRight(); },
        multiSelectAction: "forEach",
        readOnly: true
    }, {
        name: "selecttolineend",
        bindKey: bindKey("Alt-Shift-Right", "Command-Shift-Right"),
        exec: function(editor) { editor.getSelection().selectLineEnd(); },
        multiSelectAction: "forEach",
        readOnly: true
    }, {
        name: "gotolineend",
        bindKey: bindKey("Alt-Right|End", "Command-Right|End|Ctrl-E"),
        exec: function(editor) { editor.navigateLineEnd(); },
        multiSelectAction: "forEach",
        readOnly: true
    }, {
        name: "selectright",
        bindKey: bindKey("Shift-Right", "Shift-Right"),
        exec: function(editor) { editor.getSelection().selectRight(); },
        multiSelectAction: "forEach",
        readOnly: true
    }, {
        name: "gotoright",
        bindKey: bindKey("Right", "Right|Ctrl-F"),
        exec: function(editor, args) { editor.navigateRight(args.times); },
        multiSelectAction: "forEach",
        readOnly: true
    }, {
        name: "selectpagedown",
        bindKey: "Shift-PageDown",
        exec: function(editor) { editor.selectPageDown(); },
        readOnly: true
    }, {
        name: "pagedown",
        bindKey: bindKey(null, "Option-PageDown"),
        exec: function(editor) { editor.scrollPageDown(); },
        readOnly: true
    }, {
        name: "gotopagedown",
        bindKey: bindKey("PageDown", "PageDown|Ctrl-V"),
        exec: function(editor) { editor.gotoPageDown(); },
        readOnly: true
    }, {
        name: "selectpageup",
        bindKey: "Shift-PageUp",
        exec: function(editor) { editor.selectPageUp(); },
        readOnly: true
    }, {
        name: "pageup",
        bindKey: bindKey(null, "Option-PageUp"),
        exec: function(editor) { editor.scrollPageUp(); },
        readOnly: true
    }, {
        name: "gotopageup",
        bindKey: "PageUp",
        exec: function(editor) { editor.gotoPageUp(); },
        readOnly: true
    }, {
        name: "scrollup",
        bindKey: bindKey("Ctrl-Up", null),
        exec: function(e) { e.renderer.scrollBy(0, -2 * e.renderer.layerConfig.lineHeight); },
        readOnly: true
    }, {
        name: "scrolldown",
        bindKey: bindKey("Ctrl-Down", null),
        exec: function(e) { e.renderer.scrollBy(0, 2 * e.renderer.layerConfig.lineHeight); },
        readOnly: true
    }, {
        name: "selectlinestart",
        bindKey: "Shift-Home",
        exec: function(editor) { editor.getSelection().selectLineStart(); },
        multiSelectAction: "forEach",
        readOnly: true
    }, {
        name: "selectlineend",
        bindKey: "Shift-End",
        exec: function(editor) { editor.getSelection().selectLineEnd(); },
        multiSelectAction: "forEach",
        readOnly: true
    }, {
        name: "togglerecording",
        bindKey: bindKey("Ctrl-Alt-E", "Command-Option-E"),
        exec: function(editor) { editor.commands.toggleRecording(editor); },
        readOnly: true
    }, {
        name: "replaymacro",
        bindKey: bindKey("Ctrl-Shift-E", "Command-Shift-E"),
        exec: function(editor) { editor.commands.replay(editor); },
        readOnly: true
    }, {
        name: "jumptomatching",
        bindKey: bindKey("Ctrl-P", "Ctrl-Shift-P"),
        exec: function(editor) { editor.jumpToMatching(); },
        multiSelectAction: "forEach",
        readOnly: true
    }, {
        name: "selecttomatching",
        bindKey: bindKey("Ctrl-Shift-P", null),
        exec: function(editor) { editor.jumpToMatching(true); },
        readOnly: true
    }, 

    // commands disabled in readOnly mode
    {
        name: "cut",
        exec: function(editor) {
            var range = editor.getSelectionRange();
            editor._emit("cut", range);

            if (!editor.selection.isEmpty()) {
                editor.session.remove(range);
                editor.clearSelection();
            }
        },
        multiSelectAction: "forEach"
    }, {
        name: "removeline",
        bindKey: bindKey("Ctrl-D", "Command-D"),
        exec: function(editor) { editor.removeLines(); },
        multiSelectAction: "forEach"
    }, {
        name: "duplicateSelection",
        bindKey: bindKey("Ctrl-Shift-D", "Command-Shift-D"),
        exec: function(editor) { editor.duplicateSelection(); },
        multiSelectAction: "forEach"
    }, {
        name: "togglecomment",
        bindKey: bindKey("Ctrl-/", "Command-/"),
        exec: function(editor) { editor.toggleCommentLines(); },
        multiSelectAction: "forEach"
    }, {
        name: "replace",
        bindKey: bindKey("Ctrl-R", "Command-Option-F"),
        exec: function(editor) {
            var needle = prompt("Find:", editor.getCopyText());
            if (!needle)
                return;
            var replacement = prompt("Replacement:");
            if (!replacement)
                return;
            editor.replace(replacement, {needle: needle});
        }
    }, {
        name: "replaceall",
        bindKey: bindKey("Ctrl-Shift-R", "Command-Shift-Option-F"),
        exec: function(editor) {
            var needle = prompt("Find:");
            if (!needle)
                return;
            var replacement = prompt("Replacement:");
            if (!replacement)
                return;
            editor.replaceAll(replacement, {needle: needle});
        }
    }, {
        name: "undo",
        bindKey: bindKey("Ctrl-Z", "Command-Z"),
        exec: function(editor) { editor.undo(); }
    }, {
        name: "redo",
        bindKey: bindKey("Ctrl-Shift-Z|Ctrl-Y", "Command-Shift-Z|Command-Y"),
        exec: function(editor) { editor.redo(); }
    }, {
        name: "copylinesup",
        bindKey: bindKey("Alt-Shift-Up", "Command-Option-Up"),
        exec: function(editor) { editor.copyLinesUp(); }
    }, {
        name: "movelinesup",
        bindKey: bindKey("Alt-Up", "Option-Up"),
        exec: function(editor) { editor.moveLinesUp(); }
    }, {
        name: "copylinesdown",
        bindKey: bindKey("Alt-Shift-Down", "Command-Option-Down"),
        exec: function(editor) { editor.copyLinesDown(); }
    }, {
        name: "movelinesdown",
        bindKey: bindKey("Alt-Down", "Option-Down"),
        exec: function(editor) { editor.moveLinesDown(); }
    }, {
        name: "del",
        bindKey: bindKey("Delete", "Delete|Ctrl-D"),
        exec: function(editor) { editor.remove("right"); },
        multiSelectAction: "forEach"
    }, {
        name: "backspace",
        bindKey: bindKey(
            "Command-Backspace|Option-Backspace|Shift-Backspace|Backspace",
            "Ctrl-Backspace|Command-Backspace|Shift-Backspace|Backspace|Ctrl-H"
        ),
        exec: function(editor) { editor.remove("left"); },
        multiSelectAction: "forEach"
    }, {
        name: "removetolinestart",
        bindKey: bindKey("Alt-Backspace", "Command-Backspace"),
        exec: function(editor) { editor.removeToLineStart(); },
        multiSelectAction: "forEach"
    }, {
        name: "removetolineend",
        bindKey: bindKey("Alt-Delete", "Ctrl-K"),
        exec: function(editor) { editor.removeToLineEnd(); },
        multiSelectAction: "forEach"
    }, {
        name: "removewordleft",
        bindKey: bindKey("Ctrl-Backspace", "Alt-Backspace|Ctrl-Alt-Backspace"),
        exec: function(editor) { editor.removeWordLeft(); },
        multiSelectAction: "forEach"
    }, {
        name: "removewordright",
        bindKey: bindKey("Ctrl-Delete", "Alt-Delete"),
        exec: function(editor) { editor.removeWordRight(); },
        multiSelectAction: "forEach"
    }, {
        name: "outdent",
        bindKey: bindKey("Shift-Tab", "Shift-Tab"),
        exec: function(editor) { editor.blockOutdent(); },
        multiSelectAction: "forEach"
    }, {
        name: "indent",
        bindKey: bindKey("Tab", "Tab"),
        exec: function(editor) { editor.indent(); },
        multiSelectAction: "forEach"
    }, {
        name: "insertstring",
        exec: function(editor, str) { editor.insert(str); },
        multiSelectAction: "forEach"
    }, {
        name: "inserttext",
        exec: function(editor, args) {
            editor.insert(lang.stringRepeat(args.text  || "", args.times || 1));
        },
        multiSelectAction: "forEach"
    }, {
        name: "splitline",
        bindKey: bindKey(null, "Ctrl-O"),
        exec: function(editor) { editor.splitLine(); },
        multiSelectAction: "forEach"
    }, {
        name: "transposeletters",
        bindKey: bindKey("Ctrl-T", "Ctrl-T"),
        exec: function(editor) { editor.transposeLetters(); },
        multiSelectAction: function(editor) {editor.transposeSelections(1); }
    }, {
        name: "touppercase",
        bindKey: bindKey("Ctrl-U", "Ctrl-U"),
        exec: function(editor) { editor.toUpperCase(); },
        multiSelectAction: "forEach"
    }, {
        name: "tolowercase",
        bindKey: bindKey("Ctrl-Shift-U", "Ctrl-Shift-U"),
        exec: function(editor) { editor.toLowerCase(); },
        multiSelectAction: "forEach"
    }];
</script>
<script src="src-noconflict/ace.js" type="text/javascript" charset="utf-8"></script>
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.1/jquery.min.js"></script>

